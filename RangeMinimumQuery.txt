#include<bits/stdc++.h>
using namespace std;
void buildTree(int *a,int* tree,int  start,int end,int treeNode)
{
    if(start==end)
    {
        tree[treeNode]=a[start];
        return;
    }
    int mid=(start+end)/2;
    buildTree(a,tree,start,mid,2*treeNode);
    buildTree(a,tree,mid+1,end,2*treeNode+1);
    tree[treeNode]=min(tree[2*treeNode],tree[2*treeNode+1]);
}
void update(int *a,int *tree,int start,int end,int treeNode,int idx,int val)
{
    if(start==end)
    {
        a[idx]=val;
        tree[treeNode]=val;
        return;
    }
    int mid=(start+end)/2;
    if(idx>mid) update(a,tree,mid+1,end,2*treeNode+1,idx,val);
    else update(a,tree,start,mid,2*treeNode,idx,val);
}
int query(int *a,int *tree,int start,int end,int treeNode,int left,int right)
{
    if(start>right || end<left) return INT_MAX;
    else if(start>=left && end<=right) return tree[treeNode];
    else
    {
        int mid=(start+end)/2;
        int ans1=query(a,tree,start,mid,2*treeNode,left,right);
        int ans2=query(a,tree,mid+1,end,2*treeNode+1,left,right);
        return min(ans1,ans2);
    }
}
int main()
{
    int n,q;cin>>n>>q;
    int a[n];
    for(int i=0;i<n;i++) cin>>a[i];
    int *tree=new int[2*n];
    buildTree(a,tree,0,n-1,1);
    while(q--)
    {
        char str;cin>>str;
        if(str=='q')
        {
            int left,right;cin>>left>>right;
            cout<<query(a,tree,0,n-1,1,left-1,right-1)<<endl;
        }
        else
        {
            int idx,val;cin>>idx>>val;
            update(a,tree,0,n-1,1,idx-1,val);
        }
    }
    
}





